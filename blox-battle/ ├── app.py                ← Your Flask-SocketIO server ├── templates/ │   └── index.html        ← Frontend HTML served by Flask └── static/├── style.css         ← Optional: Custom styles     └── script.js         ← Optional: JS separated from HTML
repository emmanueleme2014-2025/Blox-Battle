from flask import Flask, render_template_string, request
from flask_socketio import SocketIO, join_room, emit
import eventlet
import random

eventlet.monkey_patch()

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app)

TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
  <title>Bloxfruit PvP Duel</title>
  <style>
    body { font-family: sans-serif; background: #eef2f7; padding: 20px; }
    #chat { border: 1px solid #ccc; background: #fff; height: 300px; overflow-y: auto; padding: 10px; }
    input, button { margin-top: 10px; padding: 8px; }
  </style>
  <script src="https://cdn.socket.io/4.6.1/socket.io.min.js"></script>
</head>
<body>
  <h2>Bloxfruit PvP Battle</h2>
  <input id="username" placeholder="Enter username">
  <input id="room" placeholder="Enter room code">
  <button onclick="joinRoom()">Join Room</button>
  
  <div id="chatBox" style="display:none;">
    <div id="chat"></div>
    <input id="msg" placeholder="Type message or !roll">
    <button onclick="sendMsg()">Send</button>
  </div>

  <script>
    const socket = io();
    let username = "";
    let room = "";

    function joinRoom() {
      username = document.getElementById('username').value;
      room = document.getElementById('room').value;
      socket.emit('join', { username, room });
      document.getElementById('chatBox').style.display = 'block';
    }

    function sendMsg() {
      const msg = document.getElementById('msg').value;
      socket.emit('message', { room, username, msg });
      document.getElementById('msg').value = '';
    }

    socket.on('message', data => {
      const div = document.createElement('div');
      div.textContent = `${data.username}: ${data.text}`;
      document.getElementById('chat').appendChild(div);
      document.getElementById('chat').scrollTop = 9999;
    });
  </script>
</body>
</html>
"""

@app.route('/')
def index():
    return render_template_string(TEMPLATE)

@socketio.on('join')
def handle_join(data):
    username = data['username']
    room = data['room']
    join_room(room)
    emit('message', {'username': 'System', 'text': f"{username} joined room {room}"}, to=room)

@socketio.on('message')
def handle_message(data):
    room = data['room']
    username = data['username']
    text = data['msg']

    if text.strip().lower() == '!roll':
        roll = random.randint(1, 100)
        emit('message', {'username': username, 'text': f"ðŸŽ² rolled a {roll}"}, to=room)
        store_roll(room, username, roll)
    else:
        emit('message', {'username': username, 'text': text}, to=room)

rolls = {}

def store_roll(room, user, roll):
    if room not in rolls:
        rolls[room] = {}
    rolls[room]
